import getRandomPrime


def modPower(g, a, p):
    result = 1  # Initialize result

    g = g % p

    if g == 0:
        return 0

    while a > 0:
        if (a & 1) == 1:
            result = (result * g) % p

        a = a >> 1  # a/2
        g = (g * g) % p

    return result


if __name__ == '__main__':
    p = 10204253583040238527889904793013801980353796675507703578274264640536545763673475633904096835292125625627577997858550788351510423095334165389619077246921627
    a = 60161902683784385431719173709435869879897505725134726281884351093834568564179933380144014302938118015729463161729166663385172662799090312430110753218772080
    gbp = 9585133967951971107562099235455181949255171157223043978288556464357652206334300156799579081520616476375721954835058756690951961882048663929534496637579412
    g = 5
    gab = 3506836759922652258025571981188689350074413735049549379024229216423771713289483254569573475563164457520728856085177939972220202548371187516842259316987209

    print(modPower(gbp, a, p))

    # This function to get p
    # while True:
    #     n = 512
    #     p = getRandomPrime.getPrime(n)
    #     if not getRandomPrime.MRTest(p):
    #         continue
    #     else:
    #         print(n, "bit prime is: \n", p)
    #         print(p.__sizeof__())
    #         break
